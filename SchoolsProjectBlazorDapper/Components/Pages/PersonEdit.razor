@page "/person-edit/{personId}"
@inject Logic.SchoolsDbAccessLayer dbLayer
@inject NavigationManager navigationManager
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using SchoolsProjectBlazorDapper.Models;
@using MudBlazor;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@*Wait for everything to load*@
@if (selectedPerson?.SH_d_Type == null || SH_SchoolTable?.Count == 0 || SH_d_TypeTable?.Count == 0)
{
    <p><em>Loading Person...</em></p>
}
else
{
    <h5>Editing Person</h5>
    <MudPaper Class="border-solid border-2 mud-border-primary pa-4 ma-4" Elevation="0">
        <h6><em>Selected Person</em></h6>
        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Age</th>
                    <th>School Name</th>
                    <th>Type</th>
                    <th>Date Of Birth</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@selectedPerson?.Id</td>
                    <td>@selectedPerson?.FirstName</td>
                    <td>@selectedPerson?.LastName</td>
                    <td>@selectedPerson?.Age</td>
                    <td>@selectedPerson?.SH_School?.Name</td>
                    <td>@selectedPerson?.SH_d_Type?.Name</td>
                    <td>@DateOnly.FromDateTime(selectedPerson.DateOfBirth)</td>
                </tr>
            </tbody>
        </MudSimpleTable>
        <MudButton Class="mt-4" Variant="Variant.Outlined" Color="Color.Primary" @onclick="UpdatePerson">Submit</MudButton>
    </MudPaper>
    <MudPaper Class="border-solid border-2 mud-border-primary pa-4" Elevation="0">
        <h6><em>Select to Edit</em></h6>
        <div class="person-edit-table" style="margin:30px">
            <MudTextField @bind-Value="selectedPerson.FirstName" Label="FirstName" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="selectedPerson.LastName" Label="LastName" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="selectedPerson.DateOfBirth" Label="DateOfBirth" Variant="Variant.Text"></MudTextField>
        </div>
        <MudSimpleTable>
            <tbody>
                <tr>
                    <td>
                        <MudTable Items="@SH_SchoolTable" Hover="true" Bordered="true" SortLabel="Sort By" AllowUnsorted="true"
                                  @ref="SH_SchoolMudTable" RowClassFunc="@SelectedRowClassFuncSchool" @bind-SelectedItem="selectedPerson.SH_School"
                                  T="SH_School" Dense="true" OnRowClick="RowClickFuncSchool"
                                  Filter="new Func<SH_School, bool>(FilterFuncSchool1)">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Schools</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="searchStringSchool1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<SH_School, object>(x=>x.Name ?? string.Empty)">School Name</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="SchoolName">@context.Name</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] {5, 10}" />
                            </PagerContent>
                        </MudTable>
                    </td>
                    <td>
                        <MudTable Items="@SH_d_TypeTable" Hover="true" Bordered="true" SortLabel="Sort By" AllowUnsorted="true"
                                  @ref="SH_d_TypeMudTable" RowClassFunc="@SelectedRowClassFuncType" @bind-SelectedItem="selectedPerson.SH_d_Type"
                                  T="SH_d_Type" Dense="true" OnRowClick="RowClickFuncType"
                                  Filter="new Func<SH_d_Type, bool>(FilterFuncType1)">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Type</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="searchStringType1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<SH_d_Type, object>(x=>x.Name ?? string.Empty)">Type Name</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="TypeName">@context.Name</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] {5, 10}" />
                            </PagerContent>
                        </MudTable>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </MudPaper>
}
@code {
    [Parameter] public string? personId { get; set; }
    public SH_Person? selectedPerson = new();

    // School Table
    List<SH_School>? SH_SchoolTable = new();
    private MudTable<SH_School>? SH_SchoolMudTable;
    private string searchStringSchool1 = "";

    // Type Table
    List<SH_d_Type>? SH_d_TypeTable = new();
    private MudTable<SH_d_Type>? SH_d_TypeMudTable;
    private string searchStringType1 = "";

    protected override async Task OnInitializedAsync()
    {
        // Get selected person
        selectedPerson.Id = int.Parse(personId);
        selectedPerson = await dbLayer.SH_PersonSelectById(selectedPerson);

        // Get schools for Schools table
        SH_SchoolTable = await dbLayer.SH_SchoolsSelectAll();

        // Get type for Type table
        SH_d_TypeTable = await dbLayer.SH_d_TypesSelectAll();
    }

    private async Task UpdatePerson()
    {
        await dbLayer.SH_PersonsUpdate(selectedPerson);
        navigationManager.NavigateTo("/persons");
    }

    private string SelectedRowClassFuncSchool(SH_School school, int rowNumer)
    {
        if (SH_SchoolMudTable.SelectedItem != null && SH_SchoolMudTable.SelectedItem.Equals(school))
        {
            return "selected";
        }
        return string.Empty;
    }

    private string SelectedRowClassFuncType(SH_d_Type type, int rowNumber)
    {
        if (SH_d_TypeMudTable.SelectedItem != null && SH_d_TypeMudTable.SelectedItem.Equals(type))
        {
            return "selected";
        }
        return string.Empty;
    }

    private void RowClickFuncSchool(TableRowClickEventArgs<SH_School> tableRowClickEventArgs)
    {
        selectedPerson.SchoolId = selectedPerson.SH_School.Id;
    }

    private void RowClickFuncType(TableRowClickEventArgs<SH_d_Type> tableRowClickEventArgs)
    {
        selectedPerson.TypeId = selectedPerson.SH_d_Type.Id;
    }

    private bool FilterFuncSchool1(SH_School school) => FilterFuncSchool(school, searchStringSchool1);
    private bool FilterFuncSchool(SH_School school, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{school.Name}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    private bool FilterFuncType1(SH_d_Type type) => FilterFuncType(type, searchStringType1);
    private bool FilterFuncType(SH_d_Type type, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{type.Name}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }
}
