@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using SchoolsProjectBlazorDapper.Models;
@using MudBlazor;

<MudTable Items="@GradesTable" Hover="true" Bordered="true" Dense="true" SortLabel="Sort By" AllowUnsorted="true"
          @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" @bind-SelectedItem="SelectedGrade"
          T="SH_Grade"
          OnRowClick="RowClickFunc"
          Filter="new Func<SH_Grade,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Grades</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.Grade ?? int.MaxValue)">Grade</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonTeacher?.FirstName ?? string.Empty)">Teacher First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonTeacher?.LastName ?? string.Empty)">Teacher Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonStudent?.FirstName ?? string.Empty)">Student First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonStudent?.LastName ?? string.Empty)">Student Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_d_Subject?.Name ?? string.Empty)">Subject Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Grade">@context.Grade</MudTd>
        <MudTd DataLabel="TeacherFirstName">@context.SH_PersonTeacher?.FirstName</MudTd>
        <MudTd DataLabel="TeacherLastName">@context.SH_PersonTeacher?.LastName</MudTd>
        <MudTd DataLabel="StudentFirstName">@context.SH_PersonStudent?.FirstName</MudTd>
        <MudTd DataLabel="StudentLastName">@context.SH_PersonStudent?.LastName</MudTd>
        <MudTd DataLabel="SubjectName">@context.SH_d_Subject?.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    // Data models
    [Parameter] public List<SH_Grade>? GradesTable { get; set; }
    [Parameter] public SH_Grade? SelectedGrade { get; set; }
    [Parameter] public EventCallback<SH_Grade> SelectedGradeChanged { get; set; }

    // Reference to table
    private MudTable<SH_Grade>? mudTable;

    // String for filtering
    private string searchString1 = "";

    // Search in table functions
    private bool FilterFunc1(SH_Grade grade) => FilterFunc(grade, searchString1);
    private bool FilterFunc(SH_Grade grade, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{grade.Grade} {grade.SH_PersonTeacher?.FirstName} {grade.SH_PersonTeacher?.LastName} {grade.SH_PersonStudent?.FirstName} {grade.SH_PersonStudent?.LastName} {grade.SH_d_Subject?.Name}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    // Filtering
    private string SelectedRowClassFunc(SH_Grade grade, int rowNumber)
    {
        if (mudTable?.SelectedItem != null && mudTable.SelectedItem.Equals(grade))
        {
            return "selected";
        }
        return string.Empty;
    }

    // If pressed on row call invoke changed
    private void RowClickFunc(TableRowClickEventArgs<SH_Grade> tableRowClickEventArgs)
    {
        SelectedGradeChanged.InvokeAsync(SelectedGrade);
    }
}
