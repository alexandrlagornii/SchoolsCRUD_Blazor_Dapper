@page "/grades"
@inject Logic.SchoolsDbAccessLayer dbLayer
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using SchoolsProjectBlazorDapper.Models;
@using MudBlazor;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>

<PageTitle>Grades</PageTitle>
<MudThemeProvider />
<MudPopoverProvider />

@if (GradesTable.Count == 0)
{
    <p><em>Loading Grades...</em></p>
}
else
{
    <h5>Select Row for Actions</h5>

    <MudButton Variant="Variant.Outlined" Color="Color.Primary">Add</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@disableEditDelete">Edit</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@disableEditDelete" @onclick="DeleteGrade">Delete</MudButton>

    <MudTable Items="@GradesTable" Hover="true" Bordered="true" SortLabel="Sort By" AllowUnsorted="true"
              @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" @bind-SelectedItem="selectedGrade"
              T="SH_Grade"
              OnRowClick="RowClickFunc"
              Filter="new Func<SH_Grade,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Grades</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.Grade)">Grade</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonTeacher.FirstName)">Teacher First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonTeacher.LastName)">Teacher Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonStudent.FirstName)">Student First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_PersonStudent.LastName)">Student Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SH_Grade, object>(x=>x.SH_d_Subject.Name)">Subject Name</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Grade">@context.Grade</MudTd>
            <MudTd DataLabel="Grade">@context.SH_PersonTeacher.FirstName</MudTd>
            <MudTd DataLabel="Grade">@context.SH_PersonTeacher.LastName</MudTd>
            <MudTd DataLabel="Grade">@context.SH_PersonStudent.FirstName</MudTd>
            <MudTd DataLabel="Grade">@context.SH_PersonStudent.LastName</MudTd>
            <MudTd DataLabel="Grade">@context.SH_d_Subject.Name</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] {10, 25, 50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {

    List<SH_Grade> GradesTable = new();
    private SH_Grade selectedGrade = new();

    private MudTable<SH_Grade>? mudTable;

    bool disableEditDelete = true;

    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        GradesTable = await dbLayer.SH_GradesSelectAll();
    }

    private string SelectedRowClassFunc(SH_Grade grade, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(grade))
        {
            return "selected";
        }
        return string.Empty;
    }

    private void RowClickFunc(TableRowClickEventArgs<SH_Grade> tableRowClickEventArgs)
    {
        disableEditDelete = false;
    }

    private bool FilterFunc1(SH_Grade grade) => FilterFunc(grade, searchString1);

    private bool FilterFunc(SH_Grade grade, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{grade.Grade} {grade.SH_PersonTeacher.FirstName} {grade.SH_PersonTeacher.LastName} {grade.SH_PersonStudent.FirstName} {grade.SH_PersonStudent.LastName} {grade.SH_d_Subject.Name}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    private async Task DeleteGrade()
    {
        throw new NotImplementedException();
    }
}