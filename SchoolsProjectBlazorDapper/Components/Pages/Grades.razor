@page "/grades"
@inject Logic.SchoolsDbAccessLayer dbLayer
@inject NavigationManager navigationManager
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using SchoolsProjectBlazorDapper.Models;
@using SchoolsProjectBlazorDapper.Components.Pages.Reusable;
@using MudBlazor

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (GradesTable.Count == 0)
{
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="AddGradePageRedirect">Add</MudButton>
    <p style="padding-top: 10px;"><em>Loading Grades...</em></p>
}
else
{
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="AddGradePageRedirect">Add</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(SelectedGrade.Id == null)" @onclick="(() => EditGradePageRedirect(SelectedGrade))">Edit</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@(SelectedGrade.Id == null)" @onclick="DeleteGrade">Delete</MudButton>
    <SH_GradesTable GradesTable="@GradesTable" @bind-SelectedGrade="@SelectedGrade" @bind-SelectedGrade:event="SelectedGradeChanged" />
}

@code {
    // Data models
    List<SH_Grade> GradesTable = new();
    private SH_Grade SelectedGrade = new();

    // Load table
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        GradesTable = await dbLayer.SH_GradesSelectAll();
    }

    // Delete grade if selected and pressed delete
    private async Task DeleteGrade()
    {
        await dbLayer.SH_GradesDeleteById(SelectedGrade);
        navigationManager.NavigateTo(navigationManager.Uri, true);
    }

    // Redirect to page for editing grade
    private async Task EditGradePageRedirect(SH_Grade grade)
    {
        navigationManager.NavigateTo($"/grade-edit/{grade.Id}");
    }

    // Redirect to page for adding grade
    private async Task AddGradePageRedirect()
    {
        navigationManager.NavigateTo("/grade-add");
    }
}