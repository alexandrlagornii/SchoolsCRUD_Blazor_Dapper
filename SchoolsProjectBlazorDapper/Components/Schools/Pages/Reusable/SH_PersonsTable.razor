@using SchoolsProjectBlazorDapper.Data.Schools;
@using MudBlazor;

<MudTable Items="@PersonsTable" Hover="true" Bordered="true" Dense="true" SortLabel="Sort By" AllowUnsorted="true"
          @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" @bind-SelectedItem="SelectedPerson"
          T="SH_Person"
          OnRowClick="RowClickFunc"
          Filter="new Func<SH_Person,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@NameTable</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.Id ?? int.MaxValue)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.FirstName ?? string.Empty)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.LastName ?? string.Empty)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.Age ?? int.MaxValue)">Age</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.SH_School?.Name ?? string.Empty)">School Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.SH_d_Type?.Name ?? string.Empty)">Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<SH_Person, object>(x=>x.DateOfBirth ?? DateTime.Now)">Date of Birth</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Age">@context.Age</MudTd>
        <MudTd DataLabel="School Name">@context.SH_School?.Name</MudTd>
        <MudTd DataLabel="Type">@context.SH_d_Type?.Name</MudTd>
        <MudTd DataLabel="DateOfBirth">@DateOnly.FromDateTime(context.DateOfBirth ?? DateTime.Now)</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    // Data models
    [Parameter] public List<SH_Person>? PersonsTable { get; set; }
    [Parameter] public SH_Person? SelectedPerson { get; set; }
    [Parameter] public EventCallback<SH_Person> SelectedPersonChanged { get; set; }
    [Parameter] public string? NameTable { get; set; }

    // Reference to table
    private MudTable<SH_Person>? mudTable;

    // String for filtering
    private string searchString1 = "";

    // Search in table functions
    private bool FilterFunc1(SH_Person person) => FilterFunc(person, searchString1);
    private bool FilterFunc(SH_Person person, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{person.Id} {person.FirstName} {person.LastName} {person.Age} {person.SH_School?.Name} {person.SH_d_Type?.Name} {person.DateOfBirth}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    // Filtering
    private string SelectedRowClassFunc(SH_Person person, int rowNumber)
    {
        if (mudTable?.SelectedItem != null && mudTable.SelectedItem.Equals(person))
        {
            return "selected";
        }
        return string.Empty;
    }

    // If pressed on row activate edit/delete buttons
    private void RowClickFunc(TableRowClickEventArgs<SH_Person> tableRowClickEventArgs)
    {
        SelectedPersonChanged.InvokeAsync(SelectedPerson);
    }
}
