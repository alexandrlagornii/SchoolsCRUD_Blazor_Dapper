@page "/Schools/SubjectEdit/{subjectId}"
@inject SchoolsDbAccessLayer dbLayer
@inject NavigationManager navigationManager

@using SchoolsProjectBlazorDapper.Data.Schools;
@using SchoolsProjectBlazorDapper.Components.Schools.Pages.Reusable;
@using MudBlazor;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "Admin, Teacher")]

<PageTitle>SubjectEdit</PageTitle>

@*Wait for everything to load*@
@if (!initialized)
{
    <p><em>Loading...</em></p>
}
else
{
    <SH_d_SubjectSimpleTable SelectedSubject="SelectedSubject" />
    <MudButton Class="mb-4 mt-1" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(SelectedSubject.Name == string.Empty)"
               @onclick="UpdateSubject">Submit</MudButton>

    <div class="edit-add-container">
        <MudTextField @bind-Value="SelectedSubject.Name" Label="Name" Variant="Variant.Text"></MudTextField>
    </div>
}

@code {
    [Parameter] public string subjectId { get; set; } = string.Empty;
    public SH_d_Subject SelectedSubject = new();
    bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        // try to parse
        int parsedId = 0;
        bool parsedIdSuccess = Int32.TryParse(subjectId, out parsedId);

        if (parsedIdSuccess == true)
        {
            // Get selected subject
            SelectedSubject.Id = parsedId;

            // Get Selected Subject
            SelectedSubject = await dbLayer.SH_d_SubjectsSelectById(SelectedSubject);
        }

        // Set initialized flag
        initialized = true;
    }

    private async Task UpdateSubject()
    {
        await dbLayer.SH_d_SubjectsUpdate(SelectedSubject);
        navigationManager.NavigateTo("/Schools/Subjects");
    }
}