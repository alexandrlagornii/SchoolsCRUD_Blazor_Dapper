@page "/Schools/GradeEdit/{gradeId}"
@inject SchoolsDbAccessLayer dbLayer
@inject NavigationManager navigationManager

@using SchoolsProjectBlazorDapper.Data.Schools;
@using SchoolsProjectBlazorDapper.Components.Schools.Pages.Reusable;
@using MudBlazor;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "Admin, Teacher")]

<PageTitle>GradeEdit</PageTitle>

@*Wait for everything to load*@
@if (!initialized)
{
    <p><em>Loading...</em></p>
}
else
{
    <SH_GradesSimpleTable SelectedGrade="SelectedGrade" />
    <MudButton Class="mb-4 mt-1" Variant="Variant.Outlined" Color="Color.Primary"
               Disabled="@(SelectedGrade.Grade == 0 || SelectedGrade.SH_PersonTeacher?.Id == 0
                         || SelectedGrade.SH_PersonStudent?.Id == 0 || SelectedGrade.SH_d_Subject?.Id == 0)"
               @onclick="UpdateGrade">Submit</MudButton>

    <div class="edit-add-container">
        <MudTextField @bind-Value="SelectedGrade.Grade" Label="Grade" Variant="Variant.Text"></MudTextField>
        <SH_PersonsTable NameTable="Teachers" PersonsTable="SH_PersonTeacherTable" @bind-SelectedPerson="@SelectedGrade.SH_PersonTeacher" @bind-SelectedPerson:event="SelectedPersonChanged" />
        <SH_PersonsTable NameTable="Students" PersonsTable="SH_PersonStudentTable" @bind-SelectedPerson="@SelectedGrade.SH_PersonStudent" @bind-SelectedPerson:event="SelectedPersonChanged" />
        <SH_d_SubjectTable SubjectTable="SH_d_SubjectTable" @bind-SelectedSubject="@SelectedGrade.SH_d_Subject" @bind-SelectedSubject:event="SelectedSubjectChanged" />
    </div>
}

@code {
    [Parameter] public string gradeId { get; set; } = string.Empty;
    public SH_Grade SelectedGrade = new();
    List<SH_Person> SH_PersonTeacherTable = new();
    List<SH_Person> SH_PersonStudentTable = new();
    List<SH_d_Subject> SH_d_SubjectTable = new();
    bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Try to parse
        int parsedId = 0;
        bool parsedIdSuccess = Int32.TryParse(gradeId, out parsedId);

        if (parsedIdSuccess == true)
        {
            // Get selected grade
            SelectedGrade.Id = parsedId;
            SelectedGrade = await dbLayer.SH_GradesSelectById(SelectedGrade);

            // Get persons for Teachers Table
            SH_Person teacherType = new SH_Person { TypeId = 2 };
            SH_PersonTeacherTable = (await dbLayer.SH_PersonsSelectAllByType(teacherType)).ToList();

            // Get persons for Student Table
            SH_Person studentType = new SH_Person { TypeId = 1 };
            SH_PersonStudentTable = (await dbLayer.SH_PersonsSelectAllByType(studentType)).ToList();

            // Get subjects for Subject Table
            SH_d_SubjectTable = await dbLayer.SH_d_SubjectsSelectAll();
        }

        initialized = true;
    }

    private async Task UpdateGrade()
    {
        // Update Ids
        SelectedGrade.TeacherId = SelectedGrade.SH_PersonTeacher?.Id ?? 0;
        SelectedGrade.StudentId = SelectedGrade.SH_PersonStudent?.Id ?? 0;
        SelectedGrade.SubjectId = SelectedGrade.SH_d_Subject?.Id ?? 0;

        // Update Grade
        await dbLayer.SH_GradesUpdate(SelectedGrade);

        // Move to main grades page
        navigationManager.NavigateTo("/Schools/Grades");
    }
}