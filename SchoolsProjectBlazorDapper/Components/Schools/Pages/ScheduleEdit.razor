@page "/Schools/ScheduleEdit/{scheduleId}"
@inject SchoolsDbAccessLayer dbLayer
@inject NavigationManager navigationManager

@using SchoolsProjectBlazorDapper.Data.Schools;
@using SchoolsProjectBlazorDapper.Components.Schools.Pages.Reusable;
@using MudBlazor;
@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "Admin, Teacher")]

<PageTitle>ScheduleEdit</PageTitle>

@*Wait for everything to load*@
@if (!initialized)
{
    <p><em>Loading...</em></p>
}
else
{
    <SH_ScheduleSimpleTable SelectedSchedule="SelectedSchedule" />
    <MudButton Class="mb-4 mt-1" Variant="Variant.Outlined" Color="Color.Primary"
               Disabled="@(SelectedSchedule.TimeStart == null || SelectedSchedule.TimeEnd == null
                           || SelectedSchedule.TimeStart > SelectedSchedule.TimeEnd || SelectedSchedule.SH_d_Class?.Id == 0
                           || SelectedSchedule.SH_d_Subject?.Id == 0 || SelectedSchedule.SH_PersonTeacher?.Id == 0)"
               @onclick="ScheduleUpdate">Submit</MudButton>

    <div class="edit-add-container">
        <MudTimePicker Label="TimeStart" Editable="true" Placeholder="Start Time" @bind-Time="SelectedSchedule.TimeStart" />
        <MudTimePicker Label="TimeEnd" Editable="true" Placeholder="End Time" @bind-Time="SelectedSchedule.TimeEnd" />
        <SH_PersonsTable NameTable="Teachers" PersonsTable="SH_TeacherTable" @bind-SelectedPerson="@SelectedSchedule.SH_PersonTeacher" @bind-SelectedPerson:event="SelectedPersonChanged" />
        <SH_d_ClassesTable ClassTable="SH_d_ClassTable" @bind-SelectedClass="@SelectedSchedule.SH_d_Class" @bind-SelectedClass:event="SelectedClassChanged" />
        <SH_d_SubjectTable SubjectTable="SH_d_SubjectTable" @bind-SelectedSubject="@SelectedSchedule.SH_d_Subject" @bind-SelectedSubject:event="SelectedSubjectChanged" />
    </div>
}

@code {
    [Parameter] public string scheduleId { get; set; } = string.Empty;
    public SH_Schedule SelectedSchedule = new();
    List<SH_Person> SH_TeacherTable = new();
    List<SH_d_Class> SH_d_ClassTable = new();
    List<SH_d_Subject> SH_d_SubjectTable = new();
    bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Try to parse
        int parseId = 0;
        bool parsedIdSuccess = Int32.TryParse(scheduleId, out parseId);

        if (parsedIdSuccess == true)
        {
            // Get Selected Schedule
            SelectedSchedule.Id = parseId;
            SelectedSchedule = await dbLayer.SH_SchedulesSelectById(SelectedSchedule);

            // Get persons for Teachers Table
            SH_Person teacherType = new SH_Person { TypeId = 2 };
            SH_TeacherTable = (await dbLayer.SH_PersonsSelectAllByType(teacherType)).ToList();

            // Get classes table
            SH_d_ClassTable = await dbLayer.SH_d_ClassesSelectAll();

            // Get subjects table
            SH_d_SubjectTable = await dbLayer.SH_d_SubjectsSelectAll();
        }

        initialized = true;
    }

    private async Task ScheduleUpdate()
    {
        // Update Ids
        SelectedSchedule.ClassId = SelectedSchedule.SH_d_Class?.Id ?? 0;
        SelectedSchedule.TeacherId = SelectedSchedule.SH_PersonTeacher?.Id ?? 0;
        SelectedSchedule.SubjectId = SelectedSchedule.SH_d_Subject?.Id ?? 0;

        // Insert row in db
        await dbLayer.SH_SchedulesUpdate(SelectedSchedule);

        // Get back to persons table
        navigationManager.NavigateTo("/Schools/Schedule");
    }
}
