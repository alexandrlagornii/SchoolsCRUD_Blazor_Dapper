@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using SchoolsProjectBlazorDapper.Data.Account;
@using MudBlazor;

<MudTable Items="@_UsersTable" Hover="true" Bordered="true" Dense="true" SortLabel="Sort By" AllowUnsorted="true"
          @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" @bind-SelectedItem="SelectedUser"
          T="UserViewModel" OnRowClick="RowClickFunc"
          Filter="new Func<UserViewModel, bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">User</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=>x.UserName ?? string.Empty)">UserName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<UserViewModel, object>(x=>x.Role ?? string.Empty)">Role</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.UserName</MudTd>
        <MudTd DataLabel="Role">@context.Role</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    // Data models
    [Parameter] public List<UserViewModel>? _UsersTable { get; set; }
    [Parameter] public UserViewModel? SelectedUser { get; set; }
    [Parameter] public EventCallback<UserViewModel> SelectedUserChanged { get; set; }

    // Reference to table
    private MudTable<UserViewModel>? mudTable;

    // String for filtering
    private string searchString1 = "";

    // Search in table functions
    private bool FilterFunc1(UserViewModel user) => FilterFunc(user, searchString1);
    private bool FilterFunc(UserViewModel user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{user.Id} {user.UserName} {user.Role}".ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    // Filtering
    private string SelectedRowClassFunc(UserViewModel user, int rowNumber)
    {
        if (mudTable?.SelectedItem != null && mudTable.SelectedItem.Equals(user))
        {
            return "selected";
        }
        return string.Empty;
    }

    // If pressed on row activate edit/delete buttons
    private void RowClickFunc(TableRowClickEventArgs<UserViewModel> tableRowClickEventArgs)
    {
        SelectedUserChanged.InvokeAsync(SelectedUser);
    }
}
